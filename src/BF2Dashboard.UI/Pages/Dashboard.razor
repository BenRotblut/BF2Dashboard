@page "/"
@using BF2Dashboard.Domain.BattlefieldApi
@using BF2Dashboard.Domain.Services
@using Blazored.LocalStorage
@inject ILocalStorageService _browserStorage

<PageTitle>Dashboard</PageTitle>


<h2>Battlefield 2 Servers</h2>
<table class="table table-hover" style="width: 35%">
    <thead>
    <tr>
        <th scope="col">Player</th>
        <th scope="col"></th>
        <th scope="col">Servername</th>
    </tr>
    </thead>
    <tbody>
    @if (_pinnedServers != null)
    {
        @foreach (var server in _pinnedServers.OrderByDescending(s => s.NumPlayers))
        {
            <tr class="table-secondary">
                <td>
                    [@server.NumPlayers/@server.MaxPlayers]
                </td>
                <td>
                    <ServerPinningComponent Server="@server" OnServerPinToggleEventCallback="async s => await OnServerPinToggle(s)"/>
                </td>
                <td>
                    <button type="button" class="btn btn-link display-block" @onclick="() => _selectedServer = server">@server.Name</button>
                </td>
            </tr>
        }
    }
    @if (_allServers == null)
    {
        <LoadingSpinner/>
    }
    else
    {
        @foreach (var server in _allServers.OrderByDescending(s => s.NumPlayers))
        {
            <tr class="@HighlightIfRecentlyUnpinned(server)">
                <td>
                    [@server.NumPlayers/@server.MaxPlayers]
                </td>
                <td>
                    <ServerPinningComponent Server="@server" OnServerPinToggleEventCallback="async s => await OnServerPinToggle(s)"/>
                </td>
                <td>
                    <button type="button" class="btn btn-link display-block" @onclick="() => _selectedServer = server">@server.Name</button>
                </td>
            </tr>
        }
    }
    </tbody>
</table>

@code {
    private List<Server>? _pinnedServers;
    private List<Server>? _allServers;

    protected override async Task OnInitializedAsync()
    {
        _pinnedServers = await LoadPinnedServers();
        _allServers = await ServerListService.GetServerList();
    }

    private async Task<List<Server>> LoadPinnedServers()
    {
        var result = await _browserStorage.GetItemAsync<List<Server>>(nameof(_pinnedServers));
        return result ?? new List<Server>();
    }

    private async Task OnServerPinToggle(Server toggledServer)
    {
        if (toggledServer.IsPinned)
            await AddPinnedServer(toggledServer);
        else
            await RemovePinnedServer(toggledServer);
    }

    private async Task AddPinnedServer(Server server)
    {
        _pinnedServers!.Add(server);
        _allServers!.Remove(server);
        await SavePinnedServers();
    }

    private async Task RemovePinnedServer(Server server)
    {
        _pinnedServers!.Remove(server);
        _allServers!.Add(server);
        await SavePinnedServers();
    }

    private async Task SavePinnedServers()
    {
        await _browserStorage.SetItemAsync(nameof(_pinnedServers), _pinnedServers);
    }

    private string HighlightIfRecentlyUnpinned(Server server)
    {
        return server.HasRecentlyTouchedPinState ? "table-dark" : "";
    }

}