@page "/"
@using BF2Dashboard.Domain.BattlefieldApi
@using BF2Dashboard.Domain.Services
@using Blazored.LocalStorage
@inject ILocalStorageService _browserStorage

<PageTitle>Dashboard</PageTitle>

<h2>Battlefield 2 Servers</h2>
<div class="row">
    <div class="table-responsive col-md-6">
        <ul class="list-group">
            @if (_pinnedServers != null)
            {
                @foreach (var server in _pinnedServers.OrderByDescending(s => s.NumPlayersWithoutBots))
                {
                    <li class="list-group-item list-group-item-action d-flex justify-content-between align-items-center text-nowrap active">
                        <ServerPinningComponent Server="@server" OnServerPinToggleEventCallback="async s => await OnServerPinToggle(s)"/>
                        <button type="button" class="btn btn-link display-block" @onclick="() => _selectedServer = server">
                            @server.Name
                        </button>
                        <span class="badge bg-primary rounded-pill">@server.NumPlayersWithoutBots / @server.MaxPlayers</span>
                    </li>
                }
            }
            @if (_allServers == null)
            {
                <LoadingSpinner/>
            }
            else
            {
                @foreach (var server in _allServers.OrderByDescending(s => s.NumPlayersWithoutBots))
                {
                    <li class="list-group-item list-group-item-action d-flex justify-content-between align-items-center text-nowrap">
                        <ServerPinningComponent Server="@server" OnServerPinToggleEventCallback="async s => await OnServerPinToggle(s)"/>
                        <button type="button" class="btn btn-link display-block" @onclick="() => _selectedServer = server">
                            @server.Name
                        </button>
                        <span class="badge bg-primary rounded-pill">@server.NumPlayersWithoutBots / @server.MaxPlayers</span>
                    </li>
                }
            }
        </ul>
    </div>
    <div class="table-responsive col-md-3">
        <Scoreboard Server="_selectedServer" TeamLabelFilter="@_selectedServer?.Team1"/>
    </div>
    <div class="table-responsive col-md-3">
        <Scoreboard Server="_selectedServer" TeamLabelFilter="@_selectedServer?.Team2"/>
    </div>
</div>

@code {
    private List<Server>? _pinnedServers;
    private List<Server>? _allServers;
    private Server? _selectedServer;

    protected override async Task OnInitializedAsync()
    {
        _pinnedServers = await LoadPinnedServers();
        _allServers = await ServerListService.GetServerList();
    }

    private async Task<List<Server>> LoadPinnedServers()
    {
        var result = await _browserStorage.GetItemAsync<List<Server>>(nameof(_pinnedServers));
        return result ?? new List<Server>();
    }

    private async Task OnServerPinToggle(Server toggledServer)
    {
        if (toggledServer.IsPinned)
            await AddPinnedServer(toggledServer);
        else
            await RemovePinnedServer(toggledServer);
    }

    private async Task AddPinnedServer(Server server)
    {
        _pinnedServers!.Add(server);
        _allServers!.Remove(server);
        await SavePinnedServers();
    }

    private async Task RemovePinnedServer(Server server)
    {
        _pinnedServers!.Remove(server);
        _allServers!.Add(server);
        await SavePinnedServers();
    }

    private async Task SavePinnedServers()
    {
        // await _browserStorage.SetItemAsync(nameof(_pinnedServers), _pinnedServers);
    }

}