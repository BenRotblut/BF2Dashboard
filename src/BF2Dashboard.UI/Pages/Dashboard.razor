@page "/"
@using BF2Dashboard.Domain.BattlefieldApi
@using BF2Dashboard.Domain.Services
@using Blazored.LocalStorage
@inject ILocalStorageService _browserStorage

<PageTitle>Dashboard</PageTitle>

<h1>Pinned servers</h1>
<div style="min-height: 200px;">
    @if (_pinnedServers == null)
    {
        <LoadingSpinner/>
    }
    else if (_pinnedServers.Any())
    {
        <ul>
            @foreach (var pinnedServer in _pinnedServers.OrderByDescending(s => s.NumPlayers))
            {
                <li>
                    [@pinnedServer.NumPlayers/@pinnedServer.MaxPlayers] @pinnedServer.Name
                </li>
            }
        </ul>
    }
    else
    {
        <p>
            <i>Pin a server below, to see it here.</i>
        </p>
    }
</div>

<h1>All Servers</h1>
@if (_servers == null)
{
    <LoadingSpinner/>
}
else
{
    <ul>
        @foreach (var server in _servers)
        {
            <li>
                <ServerPinningComponent Server="@server" OnServerPinToggleEventCallback="async s => await OnServerPinToggle(s)"/>
                [@server.NumPlayers/@server.MaxPlayers] @server.Name
            </li>
        }
    </ul>
}

@code {
    private List<Server>? _pinnedServers;
    private IReadOnlyList<Server>? _servers;

    protected override async Task OnInitializedAsync()
    {
        _pinnedServers = await LoadPinnedServers();
        _servers = await ServerListService.GetServerList();
    }

    private async Task<List<Server>> LoadPinnedServers()
    {
        var result = await _browserStorage.GetItemAsync<List<Server>>(nameof(_pinnedServers));
        return result ?? new List<Server>();
    }

    private async Task OnServerPinToggle(Server server)
    {
        if (server.IsPinned)
            await AddPinnedServer(server);
        else
            await RemovePinnedServer(server);
    }

    private async Task AddPinnedServer(Server server)
    {
        _pinnedServers!.Add(server);
        await _browserStorage.SetItemAsync(nameof(_pinnedServers), _pinnedServers);
    }

    private async Task RemovePinnedServer(Server server)
    {
        _pinnedServers!.Remove(server);
        await _browserStorage.SetItemAsync(nameof(_pinnedServers), _pinnedServers);
    }

}