@page "/"
@using BF2Dashboard.Domain.BattlefieldApi
@using BF2Dashboard.Domain.Services
@using Blazored.LocalStorage
@inject ILocalStorageService _browserStorage

<PageTitle>Dashboard</PageTitle>

<h2>Battlefield 2 Servers</h2>
<div class="row">
    <div class="table-responsive col-md-6">
        <div class="accordion" id="accordionExample">
            @if (_pinnedServers != null)
            {
                @foreach (var server in _pinnedServers.OrderByDescending(s => s.NumPlayersWithoutBots))
                {
                    <div class="accordion-item">
                        <div class="accordion-header">
                            <div class="accordion-item d-flex justify-content-between align-items-center text-nowrap @server.IsPinned ? 'active' : ''">
                                <ServerPinningComponent Server="@server" OnServerPinToggleEventCallback="async s => await OnServerPinToggle(s)"/>
                                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse_@server.Guid" @onclick="() => _selectedServer = server">
                                    @server.Name
                                    <span class="badge bg-primary rounded-pill" title="Number of players (without bots)">@server.NumPlayersWithoutBots / @server.MaxPlayers</span>
                                </button>
                            </div>

                            <div id="collapse_@server.Guid" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                                <div class="accordion-body">
                                    <div class="row">
                                        <div class="col">
                                            <Scoreboard Players="@_selectedServer?.Players" TeamLabelFilter="@_selectedServer?.Team1"/>
                                        </div>
                                        <div class="col">
                                            <Scoreboard Players="@_selectedServer?.Players" TeamLabelFilter="@_selectedServer?.Team2"/>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            @if (_allServers == null)
            {
                <LoadingSpinner/>
            }
            else
            {
                @foreach (var server in _allServers.OrderByDescending(s => s.NumPlayersWithoutBots))
                {
                    <div class="accordion-item">
                        <div class="accordion-header">
                            <div class="accordion-item d-flex justify-content-between align-items-center text-nowrap @server.IsPinned ? 'active' : ''">
                                <ServerPinningComponent Server="@server" OnServerPinToggleEventCallback="async s => await OnServerPinToggle(s)"/>
                                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse_@server.Guid" @onclick="() => _selectedServer = server">
                                    @server.Name
                                    <span class="badge bg-primary rounded-pill" title="Number of players (without bots)">@server.NumPlayersWithoutBots / @server.MaxPlayers</span>
                                </button>
                            </div>

                            <div id="collapse_@server.Guid" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                                <div class="accordion-body">
                                    <div class="row">
                                        <div class="col">
                                            <Scoreboard Players="@_selectedServer?.Players" TeamLabelFilter="@_selectedServer?.Team1"/>
                                        </div>
                                        <div class="col">
                                            <Scoreboard Players="@_selectedServer?.Players" TeamLabelFilter="@_selectedServer?.Team2"/>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private List<Server>? _pinnedServers;
    private List<Server>? _allServers;
    private Server? _selectedServer;

    protected override async Task OnInitializedAsync()
    {
        _pinnedServers = await LoadPinnedServers();
        _allServers = await ServerListService.GetServerList();
        UpdateOrRemovePinnedServerInstances(_allServers);
    }

    private async Task<List<Server>> LoadPinnedServers()
    {
        var result = await _browserStorage.GetItemAsync<List<Server>>(nameof(_pinnedServers));
        return result ?? new List<Server>();
    }

    private void UpdateOrRemovePinnedServerInstances(IReadOnlyCollection<Server> freshlyUpdatedServerInstances)
    {
        for (var i = 0; i < _pinnedServers!.Count; i++)
        {
            var updatedPinnedServerInstance = freshlyUpdatedServerInstances.FirstOrDefault(s => s.Guid == _pinnedServers[i].Guid);
            if (updatedPinnedServerInstance != null)
            {
                _pinnedServers[i] = updatedPinnedServerInstance;
                _pinnedServers[i].IsPinned = true;
                _allServers!.Remove(updatedPinnedServerInstance); // avoiding duplication since server gets 'moved' up
            }
            else
            {
                _pinnedServers.Remove(_pinnedServers[i]); // server is gone, we don't render old instances
            }
        }
    }

    private async Task OnServerPinToggle(Server toggledServer)
    {
        if (toggledServer.IsPinned)
            await AddPinnedServer(toggledServer);
        else
            await RemovePinnedServer(toggledServer);
    }

    private async Task AddPinnedServer(Server server)
    {
        _pinnedServers!.Add(server);
        _allServers!.Remove(server);
        await SavePinnedServers();
    }

    private async Task RemovePinnedServer(Server server)
    {
        _pinnedServers!.Remove(server);
        _allServers!.Add(server);
        await SavePinnedServers();
    }

    private async Task SavePinnedServers()
    {
        await _browserStorage.SetItemAsync(nameof(_pinnedServers), _pinnedServers);
    }

}