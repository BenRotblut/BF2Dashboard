@page "/"
@using BF2Dashboard.Domain.BattlefieldApi
@using BF2Dashboard.Domain.Services
@using Blazored.LocalStorage
@inject ILocalStorageService _browserStorage

<PageTitle>Dashboard</PageTitle>

<h2>Battlefield 2 Servers</h2>
<div class="row">
    <div class="table-responsive col-md-6">
        <MudExpansionPanels>
            @* @if (_pinnedServers != null) *@
            @* { *@
            @*     @foreach (var server in _pinnedServers.OrderByDescending(s => s.NumPlayersWithoutBots)) *@
            @*     { *@
            @*         <MudTreeViewItem Value="@server.Name" title="Show scoreboard"> *@
            @*             <div class="col"> *@
            @*                 <ServerPinningComponent Server="@server" OnServerPinToggleEventCallback="async s => await OnServerPinToggle(s)"/> *@
            @*                 <div class="row"> *@
            @*                     <div class="table-responsive col-md-3"> *@
            @*                         <Scoreboard Server="server" TeamLabelFilter="@server.Team1"/> *@
            @*                     </div> *@
            @*                     <div class="table-responsive col-md-3"> *@
            @*                         <Scoreboard Server="server" TeamLabelFilter="@server.Team2"/> *@
            @*                     </div> *@
            @*                     <span class="badge bg-primary rounded-pill" title="Number of players (without bots)">@server.NumPlayersWithoutBots / @server.MaxPlayers</span> *@
            @*                 </div> *@
            @*             </div> *@
            @*         </MudTreeViewItem> *@
            @*     } *@
            @* } *@
            @if (_pinnedServers != null)
            {
                @foreach (var server in _pinnedServers.OrderByDescending(s => s.NumPlayersWithoutBots))
                {
                    <p>
                        <ServerPinningComponent Server="@server" OnServerPinToggleEventCallback="async s => await OnServerPinToggle(s)"/>
                        <br />
                        Pinned: @server.Name;
                    </p>
                    
                }
            }
            @if (_allServers == null)
            {
                <LoadingSpinner/>
            }
            else
            {
                @foreach (var server in _allServers.OrderByDescending(s => s.NumPlayersWithoutBots))
                {
                    <MudExpansionPanel HideIcon="true">
                        <TitleContent>
                            <div class="d-flex">
                                <MudText Class="mt-1">
                                    @server.Name
                                </MudText>
                                <div class="mud-theme-primary py-4 px-6 mx-4 rounded-xl d-flex ml-auto">
                                    <MudTooltip Text="Number of players (without bots)" Arrow="true" Placement="Placement.Left">
                                        @(server.NumPlayersWithoutBots + " / " + @server.MaxPlayers) <MudIcon ></MudIcon>
                                    </MudTooltip>
                                </div>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <div class="row">
                                <ServerPinningComponent Server="@server" OnServerPinToggleEventCallback="async s => await OnServerPinToggle(s)"/>
                                <div class="col">
                                    <Scoreboard Server="@server" TeamLabelFilter="@server.Team1"/>
                                </div>
                                <div class="col">
                                    <Scoreboard Server="@server" TeamLabelFilter="@server.Team2"/>
                                </div>
                            </div>
                        </ChildContent>
                    </MudExpansionPanel>
                }
            }

        </MudExpansionPanels>
    </div>
</div>

@code {
    private List<Server>? _pinnedServers;
    private List<Server>? _allServers;
    private Server? _selectedServer;
    private string? SelectedTreeViewNode { get; set; }


    protected override async Task OnInitializedAsync()
    {
        _pinnedServers = await LoadPinnedServers();
        _allServers = await ServerListService.GetServerList();
        UpdateOrRemovePinnedServerInstances(_allServers);
    }

    private async Task<List<Server>> LoadPinnedServers()
    {
        var result = await _browserStorage.GetItemAsync<List<Server>>(nameof(_pinnedServers));
        return result ?? new List<Server>();
    }

    private void UpdateOrRemovePinnedServerInstances(IReadOnlyCollection<Server> freshlyUpdatedServerInstances)
    {
        for (var i = 0; i < _pinnedServers!.Count; i++)
        {
            var updatedPinnedServerInstance = freshlyUpdatedServerInstances.FirstOrDefault(s => s.Guid == _pinnedServers[i].Guid);
            if (updatedPinnedServerInstance != null)
            {
                _pinnedServers[i] = updatedPinnedServerInstance;
                _pinnedServers[i].IsPinned = true;
                _allServers!.Remove(updatedPinnedServerInstance); // avoiding duplication since server gets 'moved' up
            }
            else
            {
                _pinnedServers.Remove(_pinnedServers[i]); // server is gone, we don't render old instances
            }
        }
    }

    private async Task OnServerPinToggle(Server toggledServer)
    {
        if (toggledServer.IsPinned)
            await AddPinnedServer(toggledServer);
        else
            await RemovePinnedServer(toggledServer);
    }

    private async Task AddPinnedServer(Server server)
    {
        _pinnedServers!.Add(server);
        _allServers!.Remove(server);
        await SavePinnedServers();
    }

    private async Task RemovePinnedServer(Server server)
    {
        _pinnedServers!.Remove(server);
        _allServers!.Add(server);
        await SavePinnedServers();
    }

    private async Task SavePinnedServers()
    {
        await _browserStorage.SetItemAsync(nameof(_pinnedServers), _pinnedServers);
    }

}