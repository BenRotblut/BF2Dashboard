@using BF2Dashboard.Domain.BattlefieldApi
@using BF2Dashboard.Domain.Services
@inject ServerHandlingService _serverHandlingService

<Virtualize @ref="Container" Context="server" ItemsProvider="@BuildItems">
    <div class="accordion-item">
        <div class="accordion-header">
            <div class="accordion-item d-flex justify-content-between align-items-center text-nowrap @server.IsPinned ? 'active' : ''">
                <button @onclick="async () => await Toggle(server.Guid)" type="button" value="Toggle Favorite">Toggle Favorite</button>
                @* <ServerPinningComponent Server="@server"/> *@
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" aria-expanded="false" data-bs-target="#collapse_@server.Guid">
                    <span class="badge bg-primary rounded-pill me-3" title="Number of players (without bots)">@server.NumPlayersWithoutBots / @server.MaxPlayers</span>
                    @server.Name
                </button>
            </div>

            <div id="collapse_@server.Guid" class="accordion-collapse collapse">
                <div class="accordion-body ps-5 pe-3 pb-5">
                    <div class="row">
                        @if (server.IsPinned)
                        {
                            <span>Pinned</span>
                        }
                    </div>
                    <div class="row">
                        <div class="col ms-5">
                            <Scoreboard SelectedServerId="@server.Guid" TeamLabelFilter="@server.Team1"/>
                        </div>
                        <div class="col">
                            <Scoreboard SelectedServerId="@server.Guid" TeamLabelFilter="@server.Team2"/>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</Virtualize>

@code {
    private Virtualize<Server> Container { get; set; }

    [Parameter]
    public bool IsFavoriteList { get; set; }

    [Parameter]
    public EventCallback OnToggle { get; set; }

    private async ValueTask<ItemsProviderResult<Server>> BuildItems(ItemsProviderRequest request)
    {
        var result = await ResolveServers();
        return new ItemsProviderResult<Server>(result, result.Count);
    }

    private async Task<ICollection<Server>> ResolveServers()
    {
        await _serverHandlingService.Initialize();
        Console.WriteLine("rendering servers from _serverHandlingService now");

        var servers = IsFavoriteList ? _serverHandlingService.FavoriteServers : _serverHandlingService.AllServers;

        return servers.OrderByDescending(s => s.NumPlayersWithoutBots).ToList();
    }

    private async Task Toggle(string serverGuid)
    {
        await _serverHandlingService.TogglePin(serverGuid);
        await Container.RefreshDataAsync();
        // StateHasChanged();

        await OnToggle.InvokeAsync();
    }

}